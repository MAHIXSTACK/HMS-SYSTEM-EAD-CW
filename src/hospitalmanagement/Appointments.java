/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hospitalmanagement;

import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class Appointments extends javax.swing.JFrame {

    /**
     * Creates new form Appointments
     */
    public Appointments() {
        initComponents();
        
        loadAppointments();
        loadSpecializationsIntoComboBox();
       loadDoctors("All Specializations");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnSchedule = new javax.swing.JButton();
        txtAdate = new javax.swing.JTextField();
        txtPid = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAppointment = new javax.swing.JTable();
        cmbDoctors = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDoctors = new javax.swing.JTable();
        cmbSpecializations = new javax.swing.JComboBox<>();
        btnrefresh = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Patient ID");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(78, 131, 88, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Doctor ID");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(299, 131, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Appointment Date");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(78, 195, -1, -1));

        btnSchedule.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnSchedule.setText("Schedule");
        btnSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScheduleActionPerformed(evt);
            }
        });
        getContentPane().add(btnSchedule, new org.netbeans.lib.awtextra.AbsoluteConstraints(78, 259, -1, -1));

        txtAdate.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        getContentPane().add(txtAdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 192, 146, -1));

        txtPid.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        getContentPane().add(txtPid, new org.netbeans.lib.awtextra.AbsoluteConstraints(172, 128, 74, -1));

        tblAppointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Appointment ID", "Patient ID", "Doctor ID", "Date"
            }
        ));
        tblAppointment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAppointmentMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblAppointment);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 209, -1, 315));

        cmbDoctors.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        getContentPane().add(cmbDoctors, new org.netbeans.lib.awtextra.AbsoluteConstraints(389, 128, 72, -1));

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        jButton1.setBackground(new java.awt.Color(102, 102, 102));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/backs.png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI Black", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Schedule Appointments");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(332, 332, 332)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1088, -1));

        btnUpdate.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(252, 259, -1, -1));

        btnDelete.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(381, 259, -1, -1));

        tblDoctors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "DoctorID", "Name", "Specialization", "ContactNo"
            }
        ));
        jScrollPane2.setViewportView(tblDoctors);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(59, 393, -1, 261));

        cmbSpecializations.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cmbSpecializations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSpecializationsActionPerformed(evt);
            }
        });
        getContentPane().add(cmbSpecializations, new org.netbeans.lib.awtextra.AbsoluteConstraints(127, 349, 200, -1));

        btnrefresh.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnrefresh.setText("Refresh");
        btnrefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnrefreshActionPerformed(evt);
            }
        });
        getContentPane().add(btnrefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(355, 349, -1, -1));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 496, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 606, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, 500, 610));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadAppointments() {
        DefaultTableModel model = (DefaultTableModel) tblAppointment.getModel();
        model.setRowCount(0); 
        String sql = "SELECT * FROM appointments";
        try (Connection conn = DBConnection.connect();
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                model.addRow(new Object[]{rs.getInt("appointment_id"), rs.getInt("patient_id"), rs.getInt("doctor_id"), rs.getString("appointment_date")});
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error loading patients: " + e.getMessage());
        }
    }
    
   
    
    private void btnScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScheduleActionPerformed
       int patientId = Integer.parseInt(txtPid.getText());
        int doctorId = Integer.parseInt(cmbDoctors.getText());

        String date = txtAdate.getText();

        String sql = "INSERT INTO appointments(patient_id, doctor_id, appointment_date) VALUES(?,?,?)";

        try (Connection conn = DBConnection.connect(); 
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, patientId);
            pstmt.setInt(2, doctorId);
            pstmt.setString(3, date);
            pstmt.executeUpdate();

            JOptionPane.showMessageDialog(this, "Appointment scheduled successfully!");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error scheduling appointment: " + e.getMessage());
        }
                 txtPid.setText("");
                cmbDoctors.setText("");
                txtAdate.setText("");
    }//GEN-LAST:event_btnScheduleActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       new Dashboard().setVisible(true);
         this.hide();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
       int selectedRow = tblAppointment.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select an appointment to update.");
        return;
    }

    // Get the appointment_id from the selected row
    int appointmentId = (int) tblAppointment.getValueAt(selectedRow, 0);

    // Get the updated values from the input fields
    int patientId = Integer.parseInt(txtPid.getText());
    int doctorId = Integer.parseInt(cmbDoctors.getText());
    String date = txtAdate.getText();

    String sql = "UPDATE appointments SET patient_id = ?, doctor_id = ?, appointment_date = ? WHERE appointment_id = ?";

    try (Connection conn = DBConnection.connect();
         PreparedStatement pstmt = conn.prepareStatement(sql)) {

        pstmt.setInt(1, patientId);
        pstmt.setInt(2, doctorId);
        pstmt.setString(3, date);
        pstmt.setInt(4, appointmentId);
        
        int rowsAffected = pstmt.executeUpdate();
        
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Appointment updated successfully!");
            loadAppointments(); 
        } else {
            JOptionPane.showMessageDialog(this, "No appointment was updated.");
        }
                txtPid.setText("");
                cmbDoctors.setText("");
                txtAdate.setText("");
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error updating appointment: " + e.getMessage());
    }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
       int selectedRow = tblAppointment.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select an appointment to delete.");
        return;
    }

    int appointmentId = (int) tblAppointment.getValueAt(selectedRow, 0);

    String sql = "DELETE FROM appointments WHERE appointment_id = ?";

    try (Connection conn = DBConnection.connect();
         PreparedStatement pstmt = conn.prepareStatement(sql)) {

        pstmt.setInt(1, appointmentId);
        int rowsAffected = pstmt.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Appointment deleted successfully!");
            loadAppointments(); 
        } else {
            JOptionPane.showMessageDialog(this, "No appointment was deleted.");
        }
        
                 txtPid.setText("");
                cmbDoctors.setText("");
                txtAdate.setText("");
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error deleting appointment: " + e.getMessage());
    }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tblAppointmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAppointmentMouseClicked
       int selectedRow = tblAppointment.getSelectedRow();

    if (selectedRow != -1) {
        int patientId = (int) tblAppointment.getValueAt(selectedRow, 1);
        int doctorId = (int) tblAppointment.getValueAt(selectedRow, 2);
        String appointmentDate = (String) tblAppointment.getValueAt(selectedRow, 3);

        txtPid.setText(String.valueOf(patientId));
        cmbDoctors.setText(String.valueOf(doctorId));  
        txtAdate.setText(appointmentDate);
    }
    }//GEN-LAST:event_tblAppointmentMouseClicked

    private void cmbSpecializationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSpecializationsActionPerformed
       String selectedSpecialization = (String) cmbSpecializations.getSelectedItem();
        loadDoctors(selectedSpecialization);
    }//GEN-LAST:event_cmbSpecializationsActionPerformed

    private void btnrefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnrefreshActionPerformed
       loadDoctors("All Specializations");
        cmbSpecializations.setSelectedIndex(0);
    }//GEN-LAST:event_btnrefreshActionPerformed

   private void loadSpecializationsIntoComboBox() {
        cmbSpecializations.addItem("All Specializations");

        String sql = "SELECT DISTINCT specialization FROM doctors";
        
        try (Connection conn = DBConnection.connect();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                cmbSpecializations.addItem(rs.getString("specialization"));
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error loading specializations: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void loadDoctors(String specialization) {
        DefaultTableModel model = (DefaultTableModel) tblDoctors.getModel();
        model.setRowCount(0); 
        
        String sql;
        if (specialization != null && !specialization.equals("All Specializations")) {
            sql = "SELECT doctor_id, name, specialization, contact FROM doctors WHERE specialization = ?";
        } else {
            sql = "SELECT doctor_id, name, specialization, contact FROM doctors";
        }
        
        try (Connection conn = DBConnection.connect();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            if (specialization != null && !specialization.equals("All Specializations")) {
                pstmt.setString(1, specialization);
            }
            
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    model.addRow(new Object[]{
                        rs.getInt("doctor_id"), 
                        rs.getString("name"), 
                        rs.getString("specialization"), 
                        rs.getString("contact")
                    });
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error loading doctors: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }
   
     
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Appointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Appointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Appointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Appointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Appointments().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSchedule;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnrefresh;
    private javax.swing.JTextField cmbDoctors;
    private javax.swing.JComboBox<String> cmbSpecializations;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblAppointment;
    private javax.swing.JTable tblDoctors;
    private javax.swing.JTextField txtAdate;
    private javax.swing.JTextField txtPid;
    // End of variables declaration//GEN-END:variables
}
/*ComboBoxItem selectedPatient = (ComboBoxItem) cmbPatients.getSelectedItem();
        ComboBoxItem selectedDoctor = (ComboBoxItem) cmbDoctors.getSelectedItem();
        Date selectedDate = dateChooser.getDate();

        if (selectedPatient == null || selectedDoctor == null || selectedDate == null) {
            JOptionPane.showMessageDialog(this, "Please select a patient, a doctor, and a date.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
 int patientId = selectedPatient.getId();
        int doctorId = selectedDoctor.getId();
        
 
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String formattedDate = sdf.format(selectedDate);
        
        String sql = "INSERT INTO appointments(patient_id, doctor_id, appointment_date) VALUES(?,?,?)";

        try (Connection conn = DBConnection.connect();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            
            pstmt.setInt(1, patientId);
            pstmt.setInt(2, doctorId);
            pstmt.setString(3, formattedDate);
            pstmt.executeUpdate();
            
            JOptionPane.showMessageDialog(this, "Appointment scheduled successfully!");
            loadAppointments(); 
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error scheduling appointment: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }


  private void loadDoctorsIntoComboBox() {
    String sql = "SELECT doctor_id, name FROM doctors";
        try (Connection conn = DBConnection.connect(); Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                cmbDoctors.addItem(rs.getInt("doctor_id") + " - " + rs.getString("name"));
            }
        } catch (SQLException e) {
}*/